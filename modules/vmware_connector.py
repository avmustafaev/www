# modules/vmware_connector.py
from pyVim.connect import SmartConnect, Disconnect
from pyVmomi import vim, vmodl
import ssl
from modules.envi import Envi


class VMwareConnector:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VMware –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –≥–æ—Å—Ç–µ–≤—ã—Ö –û–°
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VMware"""
        self.env = Envi()
        self.si = None  # –°–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å VMware"""
        try:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
            context.verify_mode = ssl.CERT_NONE  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL (–¥–ª—è —Ç–µ—Å—Ç–∞)

            self.si = SmartConnect(
                host=self.env.vmware_ip,
                user=self.env.vmware_user,
                pwd=self.env.vmware_password,
                port=443,
                sslContext=context
            )
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VMware —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VMware: {str(e)}")

    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.si:
            Disconnect(self.si)
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VMware –∑–∞–∫—Ä—ã—Ç–æ")

    def _get_vm_by_name(self, vm_name):
        """–ù–∞—Ö–æ–¥–∏—Ç VM –ø–æ –∏–º–µ–Ω–∏"""
        content = self.si.RetrieveContent()
        container = content.viewManager.CreateContainerView(
            content.rootFolder, [vim.VirtualMachine], True
        )

        for vm in container.view:
            if vm.name == vm_name:
                return vm
        raise ValueError(f"–í–ú —Å –∏–º–µ–Ω–µ–º '{vm_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def execute_guest_command(self, vm_name, command):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –≥–æ—Å—Ç–µ–≤–æ–π –û–°
        Args:
            vm_name: –∏–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
            command: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        Returns:
            stdout: –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            vm = self._get_vm_by_name(vm_name)
            guest_ops = vm.guestOperationsManager

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ—Å—Ç–µ–≤–æ–π –û–°
            if not vm.guest or not vm.guest.toolsRunningStatus == "guestToolsRunning":
                raise RuntimeError("–ì–æ—Å—Ç–µ–≤–∞—è –û–° –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ VMware Tools –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π
            file_path = "/tmp/remote_command.sh"
            guest_ops.fileManager.createTextFileInGuest(
                vm=vm,
                name=file_path,
                content=f"#!/bin/bash\n{command}\nexit $?"
            )

            # –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
            process_id = guest_ops.processManager.RunProgramInGuest(
                vm=vm,
                programPath="/bin/bash",
                arguments=f"{file_path}"
            )

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                processes = guest_ops.processManager.ListProcessesInGuest(vm, [process_id])
                if not processes[0].endTime:
                    time.sleep(1)
                else:
                    break

            # –ß—Ç–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            stdout = guest_ops.processManager.ReadGuestProcessConsoleOutput(
                vm=vm,
                pid=process_id,
                maxLines=1000
            ).stdout

            # –û—á–∏—Å—Ç–∫–∞
            guest_ops.fileManager.DeleteFileInGuest(vm, name=file_path)

            return stdout

        except vmodl.MethodFault as error:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ VMware API: {error.msg}")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

    def get_guest_file_content(self, vm_name, file_path):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–∑ –≥–æ—Å—Ç–µ–≤–æ–π –û–°
        Args:
            vm_name: –∏–º—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
            file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –≥–æ—Å—Ç–µ–≤–æ–π –û–°
        Returns:
            —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        """
        try:
            vm = self._get_vm_by_name(vm_name)
            guest_ops = vm.guestOperationsManager

            if not vm.guest or not vm.guest.toolsRunningStatus == "guestToolsRunning":
                raise RuntimeError("–ì–æ—Å—Ç–µ–≤–∞—è –û–° –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ VMware Tools –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã")

            return guest_ops.fileManager.ReadTextFileInGuest(vm, name=file_path)

        except vmodl.MethodFault as error:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ VMware API: {error.msg}")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
